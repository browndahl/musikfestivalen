@using festival.Client.Services
@using festival.Shared.Models
@using System.Net.Http.Json;
@inject HttpClient Http
@using System.Runtime.ConstrainedExecution;
@using System.Net.Http;
@using Npgsql;
@using Dapper;

@page "/koordinator"

<PageTitle>Koordinator - Tilføjelse af vagter</PageTitle>

<h1>Nedeunder kan du som koordinator oprette vagter</h1>


<EditForm EditContext="@EditContext"
          OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit"
          class="row p-3">


    <div class="col-12 mb-3">
        <div class="form-check">
            <label for="vagter">Vælg Arbejdsplads</label>
            <InputSelect id="Navn" @bind-Value=@Arbejdspladsid class="form-control">


                @foreach (var get in gets)
                {
                    <option value="@get.Arbejdspladsid">
                        <label for="Arbejdspladsnavn">Arbejdsplads navn:</label>
                        @get.Arbejdspladsnavn

                    </option>

                }
            </InputSelect>
        </div>
    </div>
    <!----Dato for vagt-->
    <div class="col-md-6 mb-3">
        <label for="Start Dato">Start Dato</label>
        <InputDate id="DateStart" @bind-Value="DateStart" class="form-control" />
    </div>


    <!----Tidstart for vagt-->
    <div class="col-md-12 mb-3">
        <label for="tidstart">Tidstart - Bemærk tiden er altid helt, som i 15:00 eller 18:00 - Vælg op til 24</label>
        <InputNumber id="Tidstart" @bind-Value="Tidstart" class="form-control" />
        <ValidationMessage For="@(() => Tidstart)" />
    </div>

    <!----Tidslut for vagt-->
    <div class="col-md-12 mb-3">
        <label for="tidslut">Tidslut - Bemærk tiden er altid helt, som i 15:00 eller 18:00 - Vælg op til 24</label>
        <InputNumber id="Tidstart" @bind-Value="Tidslut" class="form-control" />
        <ValidationMessage For="@(() => Tidslut)" />
    </div>


    <!----Antal point-->
    <div class="col-md-6 mb-3">
        <label for="Antal">Antal point - Den frivillige får x-antal point for denne vagt</label>
        <InputNumber id="Antalpoint" @bind-Value="Antalpoint" class="form-control"
                     ParsingErrorMessage=" The {0} field has an invalid value."
                     DisplayName="Antal" />
        <ValidationMessage For="@(() => Antalpoint)" />
    </div>

    <!----Arbejdsbeskrivelse-->
    <div class="col-md-12 mb-3">
        <label for="Arbejdsbeskrivelse">Arbejdsbeskrivelse</label>
        <InputText id="Arbejdsbeskrivelse" @bind-Value="Arbejdsbeskrivelse" class="form-control" />
        <ValidationMessage For="@(() => Arbejdsbeskrivelse)" />
    </div>



    <button class="btn btn-primary" @onclick="AddArbejdspladsItemHandler">Opret vagt</button>



    <h2>Booking: return code: @ErrorCode</h2>

</EditForm>



@code {



    [Inject]
    public IArbejdspladsService arbejdspladsService { get; set; }
    public IVagtService vagtService { get; set; }
    private int ErrorCode { get; set; } = 0;

    //Vores default værdi til vores forms

    public int Arbejdspladsid = 0;
    public int Antalpersoner = 0;
    public string Arbejdspladsnavn = "Navn";
    public string Arbejdsbeskrivelse = "Beskrivelse";

    public DateTime DateStart = DateTime.Now;
    public int Tidstart = 0;
    public int Tidslut = 0;
    public int Antalpoint = 0;


    public Arbejdsplads ValgtArbejdsplads = new Arbejdsplads();


    //Vores indtastet data bliver tilføjet til vores database
    private async Task selectid()
    {
        Arbejdsplads item = new Arbejdsplads(Arbejdspladsid, Arbejdspladsnavn, Antalpersoner, Arbejdsbeskrivelse);
        ErrorCode = await ArbejdspladsService.AddItem(item);
        Arbejdspladsid++;
        Console.WriteLine("Arbejdsplads added: return code: " + ErrorCode);
    }

    //Når du har oprettet en vagt/arbejdsplads og den skal tilføjes til vagt/arbejdsplads
    private async Task AddArbejdspladsItemHandler()

    {
        Arbejdsplads item = new Arbejdsplads(Arbejdspladsid, Arbejdspladsnavn, Antalpersoner, Arbejdsbeskrivelse);
        ErrorCode = await ArbejdspladsService.AddItem(item);
        Arbejdspladsid++;
        Console.WriteLine("Shopping item added: return code: " + ErrorCode);
    }


    //Henter vores data fra database
    [Inject]
    public IArbejdspladsService ArbejdspladsService { get; set; }

    public List<Arbejdsplads> gets = new List<Arbejdsplads>();

    protected override async Task OnInitializedAsync()
    {
        gets = (await ArbejdspladsService.GetAllArbejdsplads()).ToList();
        foreach (Arbejdsplads f in gets)
        {
            Console.WriteLine($"{f.Arbejdspladsid} {f.Arbejdspladsnavn} {f.Arbejdsbeskrivelse} ");
        }
        ValgtArbejdsplads = gets[0];


    }



}