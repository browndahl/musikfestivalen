@using festival.Client.Services
@using festival.Shared.Models
@using System.Net.Http.Json;
@inject HttpClient Http
@using System.Runtime.ConstrainedExecution;
@using System.Net.Http;
@using Npgsql;
@using Dapper;



@page "/koordinator"


<PageTitle>Koordinator - Tilføjelse af vagter</PageTitle>


<h2>Indsæt venligt personlige oplysninger på den frivillige</h2>

<br />

<EditForm EditContext="@EditContext"
          OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit">

    <form class="row g-3">
        <div class="col-sm-6 ">
            <label for="Fornavn">Fornavn</label>
            <InputText id="Fornavn" @bind-Value="Fornavn" class="form-control" />
            <ValidationMessage For="@(() => Fornavn)" />
        </div>

        <div class="col-sm-6">
            <label for="Efternavn">Efternavn</label>
            <InputText id="Efternavn" @bind-Value="Efternavn" class="form-control" />
            <ValidationMessage For="@(() => Efternavn)" />
        </div>

        <div class="col-sm-6">
            <label for="Tlf">Tlf</label>
            <InputText id="Tlf" @bind-Value="Tlf" class="form-control" />
            <ValidationMessage For="@(() => Tlf)" />
        </div>

        <div class="col-sm-6">
            <label for="Adresse">Adresse</label>
            <InputText id="Adresse" @bind-Value="Adresse" class="form-control" />
            <ValidationMessage For="@(() => Adresse)" />
        </div>


        <div class="col-sm-6">
            <label for="Email">Email</label>
            <InputText id="Email" @bind-Value="Email" class="form-control" />
            <ValidationMessage For="@(() => Email)" />
        </div>

        <div class="col-sm-4">
            <label for="Alder">Alder</label>
            <InputNumber id="Alder" @bind-Value="Alder" class="form-control"
                         ParsingErrorMessage=" The {0} field has an invalid value."
                         DisplayName="Antal" />
            <ValidationMessage For="@(() => Alder)" />
        </div>

        <div class="col-sm-2">
            <label for="Frivilligid">Frivillig ID</label>
            <InputNumber id="Frivilligid" @bind-Value="Frivilligid" class="form-control"
                         ParsingErrorMessage=" The {0} field has an invalid value."
                         DisplayName="Frivilligid" />
            <ValidationMessage For="@(() => Frivilligid)" />
        </div>

        <div class="col-sm-12">
            <button class="btn btn-primary" @onclick="AddFrivilligItemHandler">Opret frivillig</button>
        </div>

       
    </form>



    <h2>Booking: return code: @ErrorCode</h2>


</EditForm>



<br />
<br />
<br />

<h2>Indsæt oplysning i formen for at oprette en vagt</h2>

<EditForm EditContext="@EditContext"
          OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit"
          class="row p-3">


    <!---Arbejdsplads--->
    <div class="col-md-4 mb-3">
        <div class="form-check">
            <label for="vagter">Vælg Arbejdsplads</label>
            <InputSelect id="Navn" @bind-Value=@Arbejdspladsid class="form-control">

                @foreach (var get in gets)
                {
                    <option value="@get.Arbejdspladsid">
                        <label for="Arbejdspladsnavn">Arbejdsplads navn:</label>
                        @get.Arbejdspladsnavn

                    </option>

                }
            </InputSelect>
        </div>
    </div>

    <!---Vagtid-->
    <div class="col-md-4 mb-3">
        <label for="Vagtid">Vagt ID</label>
        <InputNumber id="Vagtid" @bind-Value="Vagtid" class="form-control"
                     ParsingErrorMessage=" The {0} field has an invalid value."
                     DisplayName="Vagtid" />
        <ValidationMessage For="@(() => Vagtid)" />
    </div>

    <!----Dato for vagt-->
    <div class="col-md-4 mb-3">
        <label for="Dag">Dag</label>
        <InputText id="Datodag" @bind-Value="Datodag" class="form-control" />

    </div>


    <!----Tidstart for vagt-->
    <div class="col-md-4 mb-3">
        <label for="tidstart">Tidstart - 24h </label>
        <InputNumber id="Tidstart" @bind-Value="Tidstart" class="form-control" />
        <ValidationMessage For="@(() => Tidstart)" />
    </div>

    <!----Tidslut for vagt-->
    <div class="col-md-4 mb-3">
        <label for="tidslut">Tidslut - 24h</label>
        <InputNumber id="Tidslut" @bind-Value="Tidslut" class="form-control" />
        <ValidationMessage For="@(() => Tidslut)" />
    </div>

    <!----Antal point-->
    <div class="col-md-4 mb-3">
        <label for="Antal">Antal point for vagt</label>
        <InputNumber id="Antalpoint" @bind-Value="Antalpoint" class="form-control"
                     ParsingErrorMessage=" The {0} field has an invalid value."
                     DisplayName="Antal" />
        <ValidationMessage For="@(() => Antalpoint)" />
    </div>


    <button class="btn btn-primary" @onclick="AddVagtItemHandler">Opret vagt</button>

</EditForm>


@code {

    [Inject]
    public IFrivilligeService FrivilligeService { get; set; }
    private int ErrorCode { get; set; } = 0;
    public int Frivilligid = 0;
    public string Fornavn = "Indtast fornavn";
    public string Efternavn = "Indtast efternavn";
    public int Alder = 0;
    public string Email = "Indtast email";
    public string Tlf = "Indtast telefonnummer";
    public string Adresse = "Indtast adresse";

    [Inject]
    public IArbejdspladsService ArbejdspladsService { get; set; }
    [Inject]
    public IVagtService VagtService { get; set; }



    //Vores default værdi til vores forms
    public int Arbejdspladsid = 0;
    public int Antalpersoner = 0;
    public string Arbejdspladsnavn = "Navn";
    public int Tidstart = 0;
    public int Tidslut = 0;
    public int Antalpoint = 0;
    public bool Optagetledig = false;
    public int Koordinatorid = 0;
    public int Vagtid = 0;
    public string Datodag = "indtast dag";
   


    //Tilføjer vores nye indtastet data til vagtapi
    private async void AddVagtItemHandler()
    {
        Vagt item = new Vagt(vagtid: Vagtid, arbejdspladsid: Arbejdspladsid, koordinatorid: Koordinatorid, tidstart: Tidstart, tidslut: Tidslut, antalpoint: Antalpoint, datodag: Datodag, arbejdspladsnavn: Arbejdspladsnavn);
        //Console.WriteLine(item.Arbejdspladsid);
        ErrorCode = await VagtService.AddItem(item);
        Console.WriteLine(ErrorCode);
        Arbejdspladsid++;
    }
    //Tilføjer vores nye indtastet data til frivilligapi
    private async void AddFrivilligItemHandler()
    {
        Frivillige item = new Frivillige(frivilligid: Frivilligid, fornavn: Fornavn, efternavn: Efternavn, alder: Alder, email: Email, tlf: Tlf, adresse: Adresse);
        ErrorCode = await FrivilligeService.AddFrivillige(item);
        Console.WriteLine(ErrorCode);
        Frivilligid++;
    }

    //Henter vores data fra database
    public Arbejdsplads ValgtArbejdsplads = new Arbejdsplads();
    public List<Arbejdsplads> gets = new List<Arbejdsplads>();
    protected override async Task OnInitializedAsync()
    {
        gets = (await ArbejdspladsService.GetAllArbejdsplads()).ToList();
        foreach (Arbejdsplads f in gets)
        {
            Console.WriteLine($"{f.Arbejdspladsid} {f.Arbejdspladsnavn} {f.Arbejdsbeskrivelse} ");
        }
        ValgtArbejdsplads = gets[0];
    }

}